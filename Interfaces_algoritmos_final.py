import pygame
import sys
import numpy as np
import matplotlib.pyplot as plt

#Parte 1: Politicas Optimas--------------------------------------------------------------------------------------------

ld = 0.98
nMETA = 29

def lNorma_SP(aA,aB,nERROR):
    value = max([abs(aA[i]-aB[i]) for i in range(0,len(aA))])
    return(value > nERROR)

def nRw(nS,nA):
    if nS == nMETA:
        return 1
    else:
        return -1
    
#probabilidades de trancision

Norte = [
    #0    1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   
    [0.95,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #0
    [0.05,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #1
    [0.00,0.05,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #2
    [0.00,0.00,0.05,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #3
    [0.00,0.00,0.00,0.05,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #4
    [0.00,0.00,0.00,0.00,0.05,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #5
    [0.00,0.00,0.00,0.00,0.00,0.05,0.95,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #6
    [0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.10,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #7
    [0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.10,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #8
    [0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.10,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #9
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #10
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.95,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #11
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.10,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #12
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.10,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #13
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #14
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #15
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.95,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #16
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #17
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.95,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #18
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #19
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #20
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #21
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.95,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #22
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.95,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #23
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #24
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.95,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #25
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #26
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.10,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #27
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.10,0.00,0.00,0.00,0.00,0.00,0.00], #28
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00], #29
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.10,0.00,0.00,0.00,0.00], #30
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.05,0.05,0.00,0.00], #31
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.90,0.05,0.00], #32
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.90,0.05], #33
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.05], #34
]

Sur= [
    #0    1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   
    [0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #0
    [0.05,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #1
    [0.00,0.05,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #2
    [0.00,0.00,0.05,0.00,0.05,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #3
    [0.00,0.00,0.00,0.05,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #4
    [0.00,0.00,0.00,0.00,0.05,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #5
    [0.00,0.00,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #6
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.10,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #7
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.10,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #8
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.10,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #9
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.95,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #10
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #11
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #12
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.10,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #13
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #14
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #15
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #16
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #17
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #18
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #19
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #20
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #21
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.95,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #22
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00], #23
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.95,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #24
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.05,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00], #25
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.95,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #26
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.10,0.00,0.00,0.90,0.00,0.00,0.00,0.00], #27
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.10,0.00,0.00,0.90,0.00,0.00,0.00], #28
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00], #29
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0.00,0.00], #30
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.95,0.05,0.00,0.00], #31
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.90,0.05,0.00], #32
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.90,0.05], #33
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.95], #34
]
Este = [
    #0    1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   
    [0.05,0.90,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #0
    [0.00,0.10,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #1
    [0.00,0.00,0.10,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #2
    [0.00,0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #3
    [0.00,0.00,0.00,0.00,0.10,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #4
    [0.00,0.00,0.00,0.00,0.00,0.10,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #5
    [0.00,0.00,0.00,0.00,0.00,0.00,0.95,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #6
    [0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #7
    [0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #8
    [0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #9
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #10
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.95,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #11
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.95,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #12
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #13
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #14
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #15
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #16
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #17
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #18
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.10,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #19
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #20
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.10,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #21
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #22
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.90,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00], #23
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.95,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #24
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.90,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00], #25
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.95,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #26
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.05,0.00,0.00,0.00,0.00], #27
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.05,0.00,0.00,0.00], #28
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00], #29
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.95,0.00,0.00,0.00,0.00], #30
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.05,0.90,0.00,0.00], #31
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.10,0.90,0.00], #32
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.10,0.90], #33
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.95], #34
]
Oeste = [
    #0    1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   
    [0.95,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #0
    [0.90,0.10,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #1
    [0.00,0.90,0.10,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #2
    [0.00,0.00,0.90,0.05,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #3
    [0.00,0.00,0.00,0.90,0.10,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #4
    [0.00,0.00,0.00,0.00,0.90,0.10,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #5
    [0.00,0.00,0.00,0.00,0.00,0.90,0.05,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #6
    [0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #7
    [0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #8
    [0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.90,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #9
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.95,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #10
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.05,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #11
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.95,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #12
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #13
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #14
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #15
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.10,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #16
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #17
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.95,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #18
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.10,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #19
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #20
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.10,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #21
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.10,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #22
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.95,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00], #23
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #24
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.95,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00], #25
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00], #26
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.05,0.00,0.00,0.00,0.00], #27
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.00,0.90,0.00,0.00,0.05,0.00,0.00,0.00], #28
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,1.00,0.00,0.00,0.00,0.00,0.00], #29
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.95,0.00,0.00,0.00,0.00], #30
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.95,0.00,0.00,0.00], #31
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.10,0.00,0.00], #32
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.90,0.10,0.00], #33
    [0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.00,0.05,0.00,0.00,0.00,0.90,0.05], #34
]

nS = 35                #estados
nA = 4                 #acciones
nE = 0.0001            #epsilon
cA = ['N','S','E','O']
aQ = np.zeros((nS,nA)) #q value
aP = np.zeros((1,nS)) #politica
aT = []               #m transicion
aE = []               #value
nK = 1                #iteraciones
aT.append(Norte)      #aT + matriz transicion Accion 0
aT.append(Sur)        #aT + matriz transicion Accion 1
aT.append(Este)       #aT + matriz transicion Accion 2
aT.append(Oeste)      #aT + matriz transicion Accion 3
aE.append(np.ones((1,nS)))

#Algoritmo 1 Value Iteration Clasico
def value_iteration_clasico():
    global nS, nA, nMETA, nE, nRw, aT
    
    # Inicializar matrices de valor y política
    V = np.zeros(nS)
    pi = np.zeros(nS, dtype=int)
    
    # Iterar hasta convergencia
    iterations = 0
    for i in range(1000):
        delta = 0
        for s in range(nS):
            v = V[s]
            # Calcular el valor Q para todas las acciones en el estado s
            Q = [nRw(s, a) + sum(aT[a][s][s_prime] * V[s_prime] for s_prime in range(nS)) for a in range(nA)]
            # Seleccionar el máximo valor Q y actualizar el valor y la política
            V[s] = max(Q)
            pi[s] = np.argmax(Q)
            delta = max(delta, abs(v - V[s]))
        iterations += 1
        if delta < nE:
            break
    print("Número de iteraciones:", iterations)
    print("Política óptima Value iteration: ")
    print(pi)
    return pi

#Algoritmo 2: Relative Value Iteration
def relative_value_iteration():
    arbitrary_state = 28
    iterations = 1
    delta = 0
    V = np.zeros(nS)
    pi = np.zeros(nS, dtype=int)

    for i in range(1000):
        for s in range(nS):
            v = V[s]
            # Calcular el valor Q para todas las acciones en el estado s
            Q = [nRw(s, a) + sum(aT[a][s][s_prime] * V[s_prime] for s_prime in range(nS)) for a in range(nA)]
            # Seleccionar el máximo valor Q y actualizar el valor y la política
            V[s] = max(Q)
            pi[s] = np.argmax(Q)
            delta = max(delta, abs(v - V[s]))

        # Calcular rho fuera del bucle principal
        rho = V[arbitrary_state]

        # Actualizar valores de V restando rho
        for s in range(nS):
            V[s] -= rho

        iterations += 1
        if delta < nE:
            break

    print("Número de iteraciones:", iterations)
    print("Política óptima Relative Value Iteration: ")
    print(pi)
    return pi

#Algoritmo 3: gauss-Siedel Value iteration
def gauss_seidel_value_iteration():
    global nS, nA, nMETA, nE, nRw, aT, ld
    
    # Inicializar matrices de valor y política
    V = np.zeros(nS)
    pi = np.zeros(nS, dtype=int)
    
    # Iterar hasta convergencia
    iterations = 0
    while True:
        delta = 0
        for s in range(nS):
            v = V[s]
            # Calcular el valor Q para todas las acciones en el estado s
            Q = [nRw(s, a) + ld * sum(aT[a][s][s_prime] * V[s_prime] for s_prime in range(nS)) for a in range(nA)]
            # Seleccionar el máximo valor Q y actualizar el valor y la política
            V[s] = max(Q)
            pi[s] = np.argmax(Q)
            delta = max(delta, abs(v - V[s]))
        iterations += 1
        # Criterio de convergencia
        threshold = (1 - ld) / (2 * ld) * nE
        if delta < threshold:
            break
    print("Número de iteraciones:", iterations)
    print("Política Gauss Siedel Value Iteration: ")
    print(pi)
    return pi

#Algoritmo 4: Value Iteration Clásico con Factor de Descuento del 0.98
def Discounted_value_iteration():
    global nS, nA, nMETA, nE, nRw, aT, ld
    
    # Inicializar matrices de valor y política
    V = np.zeros(nS)
    pi = np.zeros(nS, dtype=int)
    
    # Iterar hasta convergencia
    iterations = 0
    while True:
        delta = 0
        for s in range(nS):
            v = V[s]
            # Calcular el valor Q para todas las acciones en el estado s
            Q = [nRw(s, a) + ld * sum(aT[a][s][s_prime] * V[s_prime] for s_prime in range(nS)) for a in range(nA)]
            # Seleccionar el máximo valor Q y actualizar el valor y la política
            V[s] = max(Q)
            pi[s] = np.argmax(Q)
            delta = max(delta, abs(v - V[s]))
        iterations += 1
        # Criterio de convergencia
        threshold = (1 - ld) / (2 * ld) * nE
        if delta < threshold:
            break
    print("Número de iteraciones:", iterations)
    print("Política óptima Discounted Value Iteration: ")
    print(pi)
    return pi

#Algoritmo 5: Relative Value Iterarion con Factor de Descuento del 0.98
def Discounted_relative_value_iteration():
    global nS, nA, nMETA, nE, nRw, aT, ld
    
    arbitrario = 28
    iterations = 0
    delta = 0
    V = np.zeros(nS)
    pi = np.zeros(nS, dtype=int)

    for i in range(1000):
        for s in range(nS):
            v = V[s]
            # Calcular el valor Q para todas las acciones en el estado s
            Q = [nRw(s, a) + ld * sum(aT[a][s][s_prime] * V[s_prime] for s_prime in range(nS)) for a in range(nA)]
            # Seleccionar el máximo valor Q y actualizar el valor y la política
            rho = V[arbitrario]
            for i in range(nS):
                V[i] -= rho
            delta = max(delta, abs(v - V[s]))
            V[s] = max(Q)
            pi[s] = np.argmax(Q)
        
        # Calcular la norma L1 de la diferencia entre las estimaciones de la función de valor
        norm_diff = np.linalg.norm(V - v, ord=1)
        # Calcular el umbral de convergencia multiplicando por el número de error
        convergence_threshold = nE * (1 - ld) / (2 * ld)
        # Verificar la convergencia
        if delta < convergence_threshold:
            break
        
        iterations += 1

    print("Número de iteraciones:", iterations)
    print("Política óptima Discounted Relative Value Iteration: ")
    print(pi)
    return pi            

#Algoritmo 6: Q-Value Iteration Clásico
def Q_value_iteration():
    nK = 1
    pi = np.zeros(nS, dtype=int)
    for i in range(1000):
        aE.append(np.zeros((1,nS)))
        for s in range(0,nS):
            for a in range(0,nA):
                aQ[s][a] = nRw(s,a) + sum([aT[a][s][i]*aE[nK-1][0][i] for i in range(0,nS)])
            aE[nK][0][s] = np.max(aQ[s])  # Actualizar aE[nK][0] con el máximo valor de aQ
            pi[s] = np.argmax(aQ[s])  # Actualizar la política óptima
        if not lNorma_SP(aE[nK][0], aE[nK-1][0],nE): break
        nK+=1
    print("Número de iteraciones:", nK)
    print("Política Q Value: ")
    print(pi)
    return pi

#algoritmo 7: Q-Value Iteration con Factor de Descuento del 0.98
def Discounted_Q_value_iteration():
    nK = 1
    pi = np.zeros(nS, dtype=int)
    while True:
        aE.append(np.zeros((1, nS)))
        max_diff = 0
        for s in range(nS):
            for a in range(nA):
                aQ[s][a] = nRw(s, a) + ld * sum([aT[a][s][i] * aE[nK - 1][0][i] for i in range(nS)])
            aE[nK][0][s] = np.max(aQ[s])  # Actualizar aE[nK][0] con el máximo valor de aQ
            pi[s] = np.argmax(aQ[s])  # Actualizar la política óptima
            
            # Calcular la diferencia entre la iteración actual y la anterior
            diff = abs(aE[nK][0][s] - aE[nK - 1][0][s])
            if diff > max_diff:
                max_diff = diff
        
        # Criterio de convergencia
        threshold = nE * (1 - ld) / (2 * ld)
        if max_diff < threshold:
            break
            
        nK += 1
    print("Número de iteraciones:", nK)
    print("Política Discounted Q Value: ")
    print(pi)
    return pi

#Parte 2: Interfaz Grafica --------------------------------------------------------------

pygame.init()

# Dimensiones de la ventana
WINDOW_WIDTH = 800
WINDOW_HEIGHT = 600

# Tamaño de las celdas de la matriz
CELL_SIZE = 50

# Crear la ventana
screen = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT))

# Tamaño deseado para las texturas
TEXTURE_SIZE = (CELL_SIZE, CELL_SIZE)

# Cargar y escalar las texturas
texture_pasto = pygame.image.load('textures/grass.jpg').convert_alpha()
texture_pasto = pygame.transform.scale(texture_pasto, TEXTURE_SIZE)

texture_pared = pygame.image.load('textures/arbol.png').convert_alpha()
texture_pared = pygame.transform.scale(texture_pared, TEXTURE_SIZE)

texture_muralla = pygame.image.load('textures/rock.png').convert_alpha()
texture_muralla = pygame.transform.scale(texture_muralla, TEXTURE_SIZE)

texture_meta = pygame.image.load('textures/meta.png').convert_alpha()
texture_meta = pygame.transform.scale(texture_meta, TEXTURE_SIZE)

texture_robot = pygame.image.load('textures/robot.png').convert_alpha()
texture_robot = pygame.transform.scale(texture_robot, TEXTURE_SIZE)

# Función para dibujar la matriz con texturas
def draw_matrix(screen, matrix):
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            cell_rect = pygame.Rect(j * CELL_SIZE, i * CELL_SIZE, CELL_SIZE, CELL_SIZE)
            # Dibujar la textura de pasto primero
            screen.blit(texture_pasto, cell_rect)
            
            # Sobrepasar la textura de pared si corresponde
            if matrix[i][j] == 1:
                screen.blit(texture_pared, cell_rect)
            
            # Sobrepasar la textura de muralla si corresponde
            elif matrix[i][j] == 2:
                screen.blit(texture_muralla, cell_rect)
            
            elif matrix[i][j] == 3:
                screen.blit(texture_meta, cell_rect)
            
# Función para comenzar
def move_robot(robot_position):
    x, y = robot_position
    next_move = politica[matrixcoords[y][x]] # Obtener el movimiento óptimo para la posición actual
    # Actualizar la posición del robot según el movimiento óptimo
    accion = np.random.choice(acciones[next_move], p=probabilidades)
    if accion == 0:  # Norte
        y -= 1
    elif accion == 1:  # Sur
        y += 1
    elif accion == 2:  # Este
        x += 1
    elif accion == 3:  # Oeste
        x -= 1

    # Verificar si el movimiento es válido (no hay obstáculos)
    if 0 <= x < matrixcoords.shape[1] and 0 <= y < matrixcoords.shape[0]:
        if matrixcoords[y][x]!= -1:
            if matrix[y][x]!= 2:
                robot_position = [x, y]
                return robot_position
            else:
                print("Movimiento bloqueado por un obstáculo.")
                return robot_position  # Retorna None si el movimiento es bloqueado por un obstáculo
        else:
            print("Movimiento bloqueado por un obstáculo.")
            return robot_position  # Retorna None si el movimiento es bloqueado por un obstáculo
    else:
        print("Movimiento fuera de los límites del mapa.")
        return robot_position  # Retorna None si el movimiento llevaría fuera del mapa
    
def comenzar():
    #esta funcion cuenta con dos metodos de operacion, el modo normal consiste en realizar el movimiento
    #y posteriormente actualizar graficamente la posicion del robot con cada paso.
    #el segundo metodo, el cual esta delimitado por la variable iteraciones episodicas, la cual 
    #es el numero de iteraciones que realizadas para medir el rendimiento del programa

    global robot_position #se declara como global para que todas las funciones lean la posicion
    
    while True: #ubicamos en una posicion aleatoria el robot en donde no halla obstaculos
        robot_position = [np.random.randint(0, 9),np.random.randint(0, 7)]
        if matrix[robot_position[1]][robot_position[0]]== 0:
            break
   
    print(f"Robot comenzando a moverse, probabilidad de seguir la politica optima de {p_exito*100}%")
    
    robot_celda = pygame.Rect(robot_position[0] * CELL_SIZE, robot_position[1] * CELL_SIZE, CELL_SIZE, CELL_SIZE)
    
    # Dibujar la textura del robot en la posición correcta
    screen.blit(texture_robot, robot_celda)
    for i in range(1000):
        robot_position = move_robot(robot_position)
        draw_matrix(screen, matrix)
        robot_celda = pygame.Rect(robot_position[0] * CELL_SIZE, robot_position[1] * CELL_SIZE, CELL_SIZE, CELL_SIZE)
        screen.blit(texture_robot, robot_celda)
        pygame.display.flip()
        pygame.time.wait(100)
        if matrix[robot_position[1]][robot_position[0]] == 3:
            print(f"Robot ha llegado a la meta en {i} pasos.")
            break
    
    # Actualizar la pantalla para mostrar el robot en su nueva posición
    pygame.display.flip()
    

def iteracion_episodica():
    rendimiento = []
    recompensas = []
    iteraciones_episodicas= 100
    for ciclo in range(iteraciones_episodicas):
        while True: #ubicamos en una posicion aleatoria el robot en donde no halla obstaculos
            robot_position = [np.random.randint(0, 9),np.random.randint(0, 7)]
            if matrix[robot_position[1]][robot_position[0]] == 0:
                break
        print(robot_position)
        recompensa = 0
        for i in range(1, 1001):
            robot_position = move_robot(robot_position)
            recompensa += nRw(matrixcoords[robot_position[1]][robot_position[0]],0)
            if matrix[robot_position[1]][robot_position[0]] == 3:
                print(f"Robot ha llegado a la meta en {i} pasos.")
                break
        rendimiento.append(i)
        recompensas.append(recompensa)
    print(rendimiento)
    print(recompensas)

    # Arreglo para el eje Y
    
    x_values = list(range(1, 101))


    # Crear el gráfico de líneas
    plt.plot(x_values, rendimiento, label=f"Numero de pasos")
    plt.plot(x_values, recompensas, label=f"Recompensas por iteracion")

    # Configurar los títulos y etiquetas de los ejes
    plt.title(f"Gráfico de rendimiento del algoritmo con {p_exito*100}% de exito")
    plt.xlabel('Iteracion')
    plt.ylabel('Rendimiento')
    if max(rendimiento) < 100:
        plt.ylim(-100, 100)
        
    # Añadir leyenda
    plt.legend()
    # Mostrar el gráfico
    plt.show()


# Generar matriz aleatoria de 7x9
matrix = np.array([[0,0,0,0,0,0,0,1,1],
                   [0,1,1,0,1,1,0,1,1],
                   [0,0,1,0,1,1,0,1,1],
                   [2,0,0,2,0,0,0,0,0],
                   [0,0,1,0,0,1,0,1,1],
                   [0,1,1,3,1,1,0,1,1],
                   [0,0,0,0,1,1,1,1,1]                  
])

matrixcoords = np.array([[ 0, 1, 2, 3, 4, 5, 6,-1,-1],
                         [ 7,-1,-1, 8,-1,-1, 9,-1,-1],
                         [10,11,-1,12,-1,-1,13,-1,-1],
                         [14,15,16,17,18,19,20,21,22],
                         [23,24,-1,25,26,-1,27,-1,-1],
                         [28,-1,-1,29,-1,-1,30,-1,-1],
                         [31,32,33,34,-1,-1,-1,-1,-1]                  
])
#la politica optima siempre es
#[1, 2, 2, 2, 2, 2, 1, 1, 0, 1, 2, 1, 0, 1, 0, 1, 3, 0, 1, 3, 3, 3, 3, 1, 3, 1, 3, 0, 1, 0, 0, 2, 2, 2, 0]
politica = value_iteration_clasico()
p_exito = 0.98
probabilidades = [p_exito, (1-p_exito)/2,(1-p_exito)/2] #probabilidad de tomar cada accion
acciones = [[0,2,3],[1,2,3],[2,0,1],[3,0,1]] #acciones probables al realizar una accion


#Dibujar elementos iniciales
screen.fill((255, 255, 255))  # Limpia la pantalla
draw_matrix(screen, matrix)

#Elementos de pygame ----------------------------------------------------------------------------------------------------

# Variables para el botón
comenzar_button_rect = pygame.Rect(CELL_SIZE*11, CELL_SIZE*1, 142, 40)  # Posición y tamaño del botón
comenzar_button_color = (255, 255, 255)  # Color del botón
comenzar_button_text = "Comenzar"  # Texto del botón
comenzar_button_font = pygame.font.Font(None, 36)  # Fuente para el texto del botón
comenzar_button_text_surface = comenzar_button_font.render(comenzar_button_text, True, (0, 0, 0))  # Superficie del texto del botón

#boton 98%
cambiar_valor_button_rect = pygame.Rect(CELL_SIZE*10, CELL_SIZE*2.5, 120, 40)  # Posición y tamaño del botón
cambiar_valor_button_color = (255, 255, 255)  # Color del botón
cambiar_valor_button_text = "Exito 98%"  # Texto del botón
cambiar_valor_button_font = pygame.font.Font(None, 30)  # Fuente para el texto del botón
cambiar_valor_button_text_surface = cambiar_valor_button_font.render(cambiar_valor_button_text, True, (0, 0, 0))  # Superficie del texto del botón

#boton 95%
cambiar_valor2_button_rect = pygame.Rect(CELL_SIZE*12.5, CELL_SIZE*2.5, 120, 40)  # Posición y tamaño del botón
cambiar_valor2_button_color = (255, 255, 255)  # Color del botón
cambiar_valor2_button_text = "Exito 95%"  # Texto del botón
cambiar_valor2_button_font = pygame.font.Font(None, 30)  # Fuente para el texto del botón
cambiar_valor2_button_text_surface = cambiar_valor_button_font.render(cambiar_valor2_button_text, True, (0, 0, 0))  # Superficie del texto del botón

#boton 90%
cambiar_valor3_button_rect = pygame.Rect(CELL_SIZE*10, CELL_SIZE*3.5, 120, 40)  # Posición y tamaño del botón
cambiar_valor3_button_color = (255, 255, 255)  # Color del botón
cambiar_valor3_button_text = "Exito 90%"  # Texto del botón
cambiar_valor3_button_font = pygame.font.Font(None, 30)  # Fuente para el texto del botón
cambiar_valor3_button_text_surface = cambiar_valor_button_font.render(cambiar_valor3_button_text, True, (0, 0, 0))

#boton 70%
cambiar_valor4_button_rect = pygame.Rect(CELL_SIZE*12.5, CELL_SIZE*3.5, 120, 40)  # Posición y tamaño del botón
cambiar_valor4_button_color = (255, 255, 255)  # Color del botón
cambiar_valor4_button_text = "Exito 70%"  # Texto del botón
cambiar_valor4_button_font = pygame.font.Font(None, 30)  # Fuente para el texto del botón
cambiar_valor4_button_text_surface = cambiar_valor_button_font.render(cambiar_valor4_button_text, True, (0, 0, 0))

#boton 50%
cambiar_valor5_button_rect = pygame.Rect(CELL_SIZE*10, CELL_SIZE*4.5, 120, 40)  # Posición y tamaño del botón
cambiar_valor5_button_color = (255, 255, 255)  # Color del botón
cambiar_valor5_button_text = "Exito 50%"  # Texto del botón
cambiar_valor5_button_font = pygame.font.Font(None, 30)  # Fuente para el texto del botón
cambiar_valor5_button_text_surface = cambiar_valor_button_font.render(cambiar_valor5_button_text, True, (0, 0, 0))

#boton 20%
cambiar_valor6_button_rect = pygame.Rect(CELL_SIZE*12.5, CELL_SIZE*4.5, 120, 40)  # Posición y tamaño del botón
cambiar_valor6_button_color = (255, 255, 255)  # Color del botón
cambiar_valor6_button_text = "Exito 20%"  # Texto del botón
cambiar_valor6_button_font = pygame.font.Font(None, 30)  # Fuente para el texto del botón
cambiar_valor6_button_text_surface = cambiar_valor_button_font.render(cambiar_valor6_button_text, True, (0, 0, 0))

grafico_button_rect = pygame.Rect(CELL_SIZE*10.5, CELL_SIZE*6, 200, 40)  # Posición y tamaño del botón
grafico_button_color = (255, 255, 255)  # Color del botón
grafico_button_text = "Mostrar Grafico"  # Texto del botón
grafico_button_font = pygame.font.Font(None, 36)  # Fuente para el texto del botón
grafico_button_text_surface = comenzar_button_font.render(grafico_button_text, True, (0, 0, 0))  # Superficie del texto del botón

#Value Iteration Clásico
alg1_button_rect = pygame.Rect(CELL_SIZE*1, CELL_SIZE*8, 220, 40)  # Posición y tamaño del botón
alg1_valor_button_color = (255, 255, 255)  # Color del botón
alg1_valor_button_text = "Value Iteration Clásico"  # Texto del botón
alg1_valor_button_font = pygame.font.Font(None, 25)  # Fuente para el texto del botón
alg1_valor_button_text_surface = alg1_valor_button_font.render(alg1_valor_button_text, True, (0, 0, 0))

#Relative Value Iteration
alg2_button_rect = pygame.Rect(CELL_SIZE*1, CELL_SIZE*9, 220, 40)  # Posición y tamaño del botón
alg2_valor_button_color = (255, 255, 255)  # Color del botón
alg2_valor_button_text = "Relative Value Iteration"  # Texto del botón
alg2_valor_button_font = pygame.font.Font(None, 25)  # Fuente para el texto del botón
alg2_valor_button_text_surface = alg2_valor_button_font.render(alg2_valor_button_text, True, (0, 0, 0))

#Gauss-Siedel Value Iteration
alg3_button_rect = pygame.Rect(CELL_SIZE*1, CELL_SIZE*10, 220, 40)  # Posición y tamaño del botón
alg3_valor_button_color = (255, 255, 255)  # Color del botón
alg3_valor_button_text = "Gauss-Siedel Value Iteration"  # Texto del botón
alg3_valor_button_font = pygame.font.Font(None, 20)  # Fuente para el texto del botón
alg3_valor_button_text_surface = alg3_valor_button_font.render(alg3_valor_button_text, True, (0, 0, 0))

#Value Iteration Clásico Descontado
alg4_button_rect = pygame.Rect(CELL_SIZE*6, CELL_SIZE*8, 220, 40)  # Posición y tamaño del botón
alg4_valor_button_color = (255, 255, 255)  # Color del botón
alg4_valor_button_text = "Value Iteration Clásico descontado"  # Texto del botón
alg4_valor_button_font = pygame.font.Font(None, 17)  # Fuente para el texto del botón
alg4_valor_button_text_surface = alg4_valor_button_font.render(alg4_valor_button_text, True, (0, 0, 0))

#Relative Value Iterarion Descontado
alg5_button_rect = pygame.Rect(CELL_SIZE*6, CELL_SIZE*9, 220, 40)  # Posición y tamaño del botón
alg5_valor_button_color = (255, 255, 255)  # Color del botón
alg5_valor_button_text = "Relative Value Iterarion Descontado"  # Texto del botón
alg5_valor_button_font = pygame.font.Font(None, 17)  # Fuente para el texto del botón
alg5_valor_button_text_surface = alg5_valor_button_font.render(alg5_valor_button_text, True, (0, 0, 0))

#Q-Value Iteration Clásico
alg6_button_rect = pygame.Rect(CELL_SIZE*6, CELL_SIZE*10, 220, 40)  # Posición y tamaño del botón
alg6_valor_button_color = (255, 255, 255)  # Color del botón
alg6_valor_button_text = "Q-Value Iteration Clásico"  # Texto del botón
alg6_valor_button_font = pygame.font.Font(None, 24)  # Fuente para el texto del botón
alg6_valor_button_text_surface = alg6_valor_button_font.render(alg6_valor_button_text, True, (0, 0, 0))

#Q-Value Iteration Clásico Descontado
alg7_button_rect = pygame.Rect(CELL_SIZE*11, CELL_SIZE*8, 220, 40)  # Posición y tamaño del botón
alg7_valor_button_color = (255, 255, 255)  # Color del botón
alg7_valor_button_text = "Q-Value Iteration Clásico Descontado"  # Texto del botón
alg7_valor_button_font = pygame.font.Font(None, 15)  # Fuente para el texto del botón
alg7_valor_button_text_surface = alg7_valor_button_font.render(alg7_valor_button_text, True, (0, 0, 0))

#Dibujar botones
def marco_boton_probabilidad():
    pygame.draw.rect(screen, (0, 0, 0), cambiar_valor_button_rect, 2)
    pygame.draw.rect(screen, (0, 0, 0), cambiar_valor2_button_rect, 2)
    pygame.draw.rect(screen, (0, 0, 0), cambiar_valor3_button_rect, 2)
    pygame.draw.rect(screen, (0, 0, 0), cambiar_valor4_button_rect, 2)
    pygame.draw.rect(screen, (0, 0, 0), cambiar_valor5_button_rect, 2)
    pygame.draw.rect(screen, (0, 0, 0), cambiar_valor6_button_rect, 2)

def marco_boton_algoritmo():
    pygame.draw.rect(screen, (0, 0, 0), alg1_button_rect, 2)
    pygame.draw.rect(screen, (0, 0, 0), alg2_button_rect, 2)
    pygame.draw.rect(screen, (0, 0, 0), alg3_button_rect, 2)
    pygame.draw.rect(screen, (0, 0, 0), alg4_button_rect, 2)
    pygame.draw.rect(screen, (0, 0, 0), alg5_button_rect, 2)
    pygame.draw.rect(screen, (0, 0, 0), alg6_button_rect, 2)
    pygame.draw.rect(screen, (0, 0, 0), alg7_button_rect, 2)

pygame.draw.rect(screen, comenzar_button_color, comenzar_button_rect,2)
pygame.draw.rect(screen, (0, 0, 0), comenzar_button_rect, 2)  # El último parámetro es el grosor del borde
screen.blit(comenzar_button_text_surface, (comenzar_button_rect.x + 10, comenzar_button_rect.y + 5))

#cambiar valores de probabilidad
pygame.draw.rect(screen, cambiar_valor_button_color, cambiar_valor_button_rect)
pygame.draw.rect(screen, (0, 0, 0), cambiar_valor_button_rect, 2)  # El último parámetro es el grosor del borde
screen.blit(cambiar_valor_button_text_surface, (cambiar_valor_button_rect.x + 10, cambiar_valor_button_rect.y + 5))

pygame.draw.rect(screen, cambiar_valor_button_color, cambiar_valor2_button_rect)
pygame.draw.rect(screen, (0, 0, 0), cambiar_valor2_button_rect, 2)  # El último parámetro es el grosor del borde
screen.blit(cambiar_valor2_button_text_surface, (cambiar_valor2_button_rect.x + 10, cambiar_valor2_button_rect.y + 5))

pygame.draw.rect(screen, cambiar_valor_button_color, cambiar_valor3_button_rect)
pygame.draw.rect(screen, (0, 0, 0), cambiar_valor3_button_rect, 2)  # El último parámetro es el grosor del borde
screen.blit(cambiar_valor3_button_text_surface, (cambiar_valor3_button_rect.x + 10, cambiar_valor3_button_rect.y + 5))

pygame.draw.rect(screen, cambiar_valor_button_color, cambiar_valor4_button_rect)
pygame.draw.rect(screen, (0, 0, 0), cambiar_valor4_button_rect, 2)  # El último parámetro es el grosor del borde
screen.blit(cambiar_valor4_button_text_surface, (cambiar_valor4_button_rect.x + 10, cambiar_valor4_button_rect.y + 5))

pygame.draw.rect(screen, cambiar_valor_button_color, cambiar_valor5_button_rect)
pygame.draw.rect(screen, (0, 0, 0), cambiar_valor5_button_rect, 2)  # El último parámetro es el grosor del borde
screen.blit(cambiar_valor5_button_text_surface, (cambiar_valor5_button_rect.x + 10, cambiar_valor5_button_rect.y + 5))

pygame.draw.rect(screen, cambiar_valor_button_color, cambiar_valor6_button_rect)
pygame.draw.rect(screen, (0, 0, 0), cambiar_valor6_button_rect, 2)  # El último parámetro es el grosor del borde
screen.blit(cambiar_valor6_button_text_surface, (cambiar_valor6_button_rect.x + 10, cambiar_valor6_button_rect.y + 5))

pygame.draw.rect(screen, grafico_button_color, grafico_button_rect)
pygame.draw.rect(screen, (0, 0, 0), grafico_button_rect, 2)  # El último parámetro es el grosor del borde
screen.blit(grafico_button_text_surface, (grafico_button_rect.x + 10, grafico_button_rect.y + 5))



pygame.draw.rect(screen, alg1_valor_button_color, alg1_button_rect)
pygame.draw.rect(screen, (0, 0, 0), alg1_button_rect, 2)  # El último parámetro es el grosor del borde
screen.blit(alg1_valor_button_text_surface, (alg1_button_rect.x + 10, alg1_button_rect.y + 5))

pygame.draw.rect(screen, alg2_valor_button_color, alg2_button_rect)
pygame.draw.rect(screen, (0, 0, 0), alg2_button_rect, 2)  # El último parámetro es el grosor del borde
screen.blit(alg2_valor_button_text_surface, (alg2_button_rect.x + 10, alg2_button_rect.y + 5))

pygame.draw.rect(screen, alg3_valor_button_color, alg3_button_rect)
pygame.draw.rect(screen, (0, 0, 0), alg3_button_rect, 2)  # El último parámetro es el grosor del borde
screen.blit(alg3_valor_button_text_surface, (alg3_button_rect.x + 10, alg3_button_rect.y + 5))

pygame.draw.rect(screen, alg4_valor_button_color, alg4_button_rect)
pygame.draw.rect(screen, (0, 0, 0), alg4_button_rect, 2)  # El último parámetro es el grosor del borde
screen.blit(alg4_valor_button_text_surface, (alg4_button_rect.x + 10, alg4_button_rect.y + 5))

pygame.draw.rect(screen, alg5_valor_button_color, alg5_button_rect)
pygame.draw.rect(screen, (0, 0, 0), alg5_button_rect, 2)  # El último parámetro es el grosor del borde
screen.blit(alg5_valor_button_text_surface, (alg5_button_rect.x + 10, alg5_button_rect.y + 5))

pygame.draw.rect(screen, alg6_valor_button_color, alg6_button_rect)
pygame.draw.rect(screen, (0, 0, 0), alg6_button_rect, 2)  # El último parámetro es el grosor del borde
screen.blit(alg6_valor_button_text_surface, (alg6_button_rect.x + 10, alg6_button_rect.y + 5))

pygame.draw.rect(screen, alg7_valor_button_color, alg7_button_rect)
pygame.draw.rect(screen, (0, 0, 0), alg7_button_rect, 2)  # El último parámetro es el grosor del borde
screen.blit(alg7_valor_button_text_surface, (alg7_button_rect.x + 10, alg7_button_rect.y + 5))

#Elementos de pygame fin  ----------------------------------------------------------------------------------------------------

while True:

    #Eventos de pygame
    for event in pygame.event.get():

        #Evento de cierre
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        #Eventos de botones
        elif event.type == pygame.MOUSEBUTTONDOWN:

            #Cuando se presiona Comenzar se llama a la funcion comenzar
            if comenzar_button_rect.collidepoint(pygame.mouse.get_pos()):
                comenzar() 

            #Para cada uno de los 6 botones que interactuan sobre la probabilidad de exito
            #se redefine la variable de probabilidad de exito y se recalculan las probabilidades
            #para efectos esteticos tambien se pinta de rojo el marco del boton seleccionado         
            if cambiar_valor_button_rect.collidepoint(pygame.mouse.get_pos()):
                p_exito = 0.98  # Actualizar el valor de éxito
                probabilidades = [p_exito, (1-p_exito)/2,(1-p_exito)/2]
                print(f"Valor de éxito actualizado a {p_exito}")
                marco_boton_probabilidad()
                pygame.draw.rect(screen, (255, 0, 0), cambiar_valor_button_rect, 2)

            if cambiar_valor2_button_rect.collidepoint(pygame.mouse.get_pos()):
                p_exito = 0.95  # Actualizar el valor de éxito
                probabilidades = [p_exito, (1-p_exito)/2,(1-p_exito)/2]
                print(f"Valor de éxito actualizado a {p_exito}")
                marco_boton_probabilidad()
                pygame.draw.rect(screen, (255, 0, 0), cambiar_valor2_button_rect, 2)

            if cambiar_valor3_button_rect.collidepoint(pygame.mouse.get_pos()):
                p_exito = 0.90  # Actualizar el valor de éxito
                probabilidades = [p_exito, (1-p_exito)/2,(1-p_exito)/2]
                print(f"Valor de éxito actualizado a {p_exito}")
                marco_boton_probabilidad()
                pygame.draw.rect(screen, (255, 0, 0), cambiar_valor3_button_rect, 2)

            if cambiar_valor4_button_rect.collidepoint(pygame.mouse.get_pos()):
                p_exito = 0.70  # Actualizar el valor de éxito
                probabilidades = [p_exito, (1-p_exito)/2,(1-p_exito)/2]
                print(f"Valor de éxito actualizado a {p_exito}")
                marco_boton_probabilidad()
                pygame.draw.rect(screen, (255, 0, 0), cambiar_valor4_button_rect, 2)

            if cambiar_valor5_button_rect.collidepoint(pygame.mouse.get_pos()):
                p_exito = 0.50  # Actualizar el valor de éxito
                probabilidades = [p_exito, (1-p_exito)/2,(1-p_exito)/2]
                print(f"Valor de éxito actualizado a {p_exito}")
                marco_boton_probabilidad()
                pygame.draw.rect(screen, (255, 0, 0), cambiar_valor5_button_rect, 2)
            
            if cambiar_valor6_button_rect.collidepoint(pygame.mouse.get_pos()):
                p_exito = 0.20  # Actualizar el valor de éxito
                probabilidades = [p_exito, (1-p_exito)/2,(1-p_exito)/2]
                print(f"Valor de éxito actualizado a {p_exito}")
                marco_boton_probabilidad()
                pygame.draw.rect(screen, (255, 0, 0), cambiar_valor6_button_rect, 2)

            if grafico_button_rect.collidepoint(pygame.mouse.get_pos()):
                iteracion_episodica()


            if alg1_button_rect.collidepoint(pygame.mouse.get_pos()):
                politica = value_iteration_clasico()
                print(f"Algoritmo actualizado a Value Iteration Clasico")
                marco_boton_algoritmo()
                pygame.draw.rect(screen, (255, 0, 0), alg1_button_rect, 2)

            if alg2_button_rect.collidepoint(pygame.mouse.get_pos()):
                politica = relative_value_iteration()
                print(f"Algoritmo actualizado a Relative Value Iteration")
                marco_boton_algoritmo()
                pygame.draw.rect(screen, (255, 0, 0), alg2_button_rect, 2)

            if alg3_button_rect.collidepoint(pygame.mouse.get_pos()):
                politica = gauss_seidel_value_iteration()
                print(f"Algoritmo actualizado a Gauss-Siedel Value Iteration")
                marco_boton_algoritmo()
                pygame.draw.rect(screen, (255, 0, 0), alg3_button_rect, 2)

            if alg4_button_rect.collidepoint(pygame.mouse.get_pos()):
                politica = Discounted_value_iteration()
                print(f"Algoritmo actualizado a Value Iteration Clásico con Factor de Descuento del 0.98")
                marco_boton_algoritmo()
                pygame.draw.rect(screen, (255, 0, 0), alg4_button_rect, 2)

            if alg5_button_rect.collidepoint(pygame.mouse.get_pos()):
                politica = relative_value_iteration()
                print(f"Algoritmo actualizado a Relative Value Iterarion con Factor de Descuento del 0.98")
                marco_boton_algoritmo()
                pygame.draw.rect(screen, (255, 0, 0), alg5_button_rect, 2)

            if alg6_button_rect.collidepoint(pygame.mouse.get_pos()):
                politica = Q_value_iteration()
                print(f"Algoritmo actualizado a Q-Value Iteration Clásico")
                marco_boton_algoritmo()
                pygame.draw.rect(screen, (255, 0, 0), alg6_button_rect, 2)

            if alg7_button_rect.collidepoint(pygame.mouse.get_pos()):
                politica = Discounted_Q_value_iteration()
                print(f"Algoritmo actualizado a Q-Value Iteration con Factor de Descuento del 0.98")
                marco_boton_algoritmo()
                pygame.draw.rect(screen, (255, 0, 0), alg7_button_rect, 2)

    pygame.display.flip()
